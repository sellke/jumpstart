---
description: Guide for creating and formatting Cursor rules properly
---

# Cursor Rule Creation Guide

This guide covers how to properly create and format Cursor rules in this workspace.

## Directory Structure
- All rules must be stored in the `.cursor/rules/` directory
- Rule files must have a `.mdc` extension (Markdown with Cursor extensions)
- Example: `.cursor/rules/my-rule.mdc`

## Frontmatter Metadata
Rules use YAML frontmatter to control their behavior. Choose ONE of these approaches:

### Always Applied Rules
```yaml
---
alwaysApply: true
---
```
- Applied to every AI request automatically
- Use sparingly for critical project-wide guidelines
- Example: Project structure, core coding standards

### File-Scoped Rules
```yaml
---
globs: *.ts,*.tsx,*.js,*.jsx
---
```
- Applied only to files matching the glob patterns
- Use for language-specific or technology-specific rules
- Supports comma-separated patterns

### Manual/Fetchable Rules
```yaml
---
description: Brief description of what this rule covers
---
```
- Applied when the AI determines the rule is relevant based on context
- Use for specialized topics, specific libraries, or complex workflows
- The description helps the AI decide when to fetch the rule

## File References
When referencing files in your rules, use the special syntax:
```markdown
[filename.ext](mdc:filename.ext)
```
- Path is relative to workspace root
- Enables direct file linking within rules
- Example: `[package.json](mdc:package.json)` or `[src/utils/auth.ts](mdc:src/utils/auth.ts)`

## Content Structure Best Practices

### Clear Headings
Use markdown headings to organize content:
```markdown
# Main Rule Title
## What to Do / What Not to Do
## Reasoning
## Examples
## Context/When This Applies
```

### Code Examples
Always provide concrete examples:
```markdown
## ❌ Avoid:
\`\`\`tsx
// Bad example
\`\`\`

## ✅ Prefer:
\`\`\`tsx
// Good example
\`\`\`
```

### Reasoning Section
Explain WHY the rule exists:
- Technical benefits
- Performance implications
- Maintainability concerns
- Team consistency

## Rule Creation Workflow

1. **Plan the scope**: Determine if the rule should be always applied, file-scoped, or fetchable
2. **Create frontmatter**: Add appropriate metadata at the top
3. **Write clear content**: Use examples, explanations, and proper markdown
4. **Test file references**: Ensure any `[file](mdc:file)` links work correctly
5. **Use descriptive filenames**: Make rule files easy to identify

## Common Mistakes to Avoid

- ❌ Missing or malformed frontmatter
- ❌ Using relative file paths without `mdc:` syntax
- ❌ Creating overly broad "always apply" rules
- ❌ Forgetting to include concrete examples
- ❌ Using non-`.mdc` file extensions

## Frontmatter Examples

### Technology-Specific Rule
```yaml
---
globs: *.prisma,prisma/*
description: Prisma schema and query best practices
---
```

### Project Structure Rule
```yaml
---
alwaysApply: true
---
# Project follows Next.js App Router structure with [layout.tsx](mdc:app/layout.tsx)
```

### Library-Specific Rule
```yaml
---
globs: *.ts,*.tsx
description: Mantine component usage patterns
---
```

## File Naming Conventions
- Use kebab-case: `my-rule-name.mdc`
- Be descriptive: `mantine-server-components.mdc` not `mantine.mdc`
- Group related rules with prefixes: `db-prisma-queries.mdc`, `db-connection-patterns.mdc`

## Testing Rules
After creating a rule:
1. Verify the frontmatter is valid YAML
2. Check that file references work correctly
3. Ensure the rule applies to the intended files/contexts
4. Test that examples are accurate and runnable
